#include <stdio.h>
void findWaitingTime(int processes[],int n,int bt[], int wt[],int priority[])
{
    int i,j,key,temp;
    for(i=0;i<n;i++)
     {
        key=i;
        for(j=i+1;j<n;j++)
        {
           if(priority[j]<priority[key])
           {
              key=j;
           }
        }
        temp=bt[i];
        bt[i]=bt[key];
        bt[key]=temp;
 
        temp=priority[i];
        priority[i]=priority[key];
        priority[key]=temp;
 
        temp=processes[i];
        processes[i]=processes[key];
        processes[key]=temp;
     }
    wt[0] = 0;
   
    for (int  i = 1; i < n ; i++ )
    {
        wt[i] =  bt[i-1] + wt[i-1] ;
    }
}
void findTurnAroundTime(int n, 
                  int bt[], int wt[], int tat[])
{

    for (int  i = 0; i < n ; i++)
    {
        tat[i] = bt[i] + wt[i];
    }
}
void findavgTime( int processes[], int n, int bt[],int priority[])
{
    int wt[n], tat[n];
    float total_wt = 0, total_tat = 0;
   
    findWaitingTime(processes,n, bt, wt,priority);
   
    findTurnAroundTime(n, bt, wt, tat);
 
    printf("Processes_id  Priority   Burst time   Waiting time   Turn around time\n");
   
    for (int  i=0; i<n; i++)
    {
        total_wt = total_wt + wt[i];
        total_tat = total_tat + tat[i];
        printf(" p[%d]",processes[i]);
        printf("          %d",priority[i]);
        printf("          %d", bt[i] );
        printf("          %d",wt[i] );
        printf("            %d\n",tat[i] );
    }
    float avg_wt=total_wt/n;
    float avg_tat=total_tat/n;
    printf("Average waiting time = %.2f",avg_wt);
    printf("\n");
    printf("Average turn around time = %.2f ",avg_tat);
}
int main(){

    int processes[100],burst_time[100],priority[100],n,i;
    printf("Enter the number of processers:");
    scanf("%d",&n);
    for(i=0;i<n;i++){
        printf("Enter the burst time and priority of the process %d: ",i+1);
        scanf("%d",&burst_time[i]);
        scanf("%d",&priority[i]);
        processes[i] = i+1;
    }
   
    findavgTime(processes, n,  burst_time,priority);
    return 0;
}